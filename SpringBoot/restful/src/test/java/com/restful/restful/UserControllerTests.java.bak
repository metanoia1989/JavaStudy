package com.restful.restful;

import com.restful.controller.UserController;
import com.restful.restservice.RestfulApplication;

import org.junit.Before;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.RequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import static org.hamcrest.Matchers.equalTo;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = RestfulApplication.class)
class UserControllerTests {

	private MockMvc mvc;

	@BeforeEach
	public void setUp() throws Exception {
		mvc = MockMvcBuilders.standaloneSetup(new UserController()).build();
	}
	
	@Test
	public void  testUserController() throws Exception {
		// 测试 UserController
		RequestBuilder request;
		System.out.println("测试，呜啦啦啦");	
		System.out.println(mvc.toString());	
		// 1. get 查询 user 列表，为空
		request = MockMvcRequestBuilders.get("/users/");	
		mvc.perform(request)
			.andExpect(status().isOk())
			.andExpect(content().string(equalTo("[]")));
		
		// 2. post 提交一个user
		request = MockMvcRequestBuilders.post("/users/")
			.contentType(MediaType.APPLICATION_JSON)
			.content("{\"id\":1,\"name\":\"测试大师\",\"age\":20}");
		mvc.perform(request)
			.andExpect(content().string(equalTo("success")));
		
		// 3. get获取user；列表，应该有刚才插入的数据
		request = MockMvcRequestBuilders.get("/users/");	
		mvc.perform(request)
			.andExpect(status().isOk())
			.andExpect(content().string(equalTo("[{\"id\":1,\"name\":\"测试大师\",\"age\":20}]")));
		
		// 4. put修改id为1的user
		request = MockMvcRequestBuilders.put("/users/1")
			.contentType(MediaType.APPLICATION_JSON)
			.content("{\"name\":\"测试终极大师\",\"age\":30}");
		mvc.perform(request)
			.andExpect(content().string(equalTo("success")));
		
		// 5. get一个id为1的user
		request = MockMvcRequestBuilders.get("/users/1");
		mvc.perform(request)
			.andExpect(content().string(equalTo("{\"id\":1,\"name\":\"测试终极大师\",\"age\":30}")));
		
		// 6. del删除id为1的user
		request = MockMvcRequestBuilders.delete("/users/1");
		mvc.perform(request)
			.andExpect(content().string(equalTo("success")));
		
		// 7. get 查一下user列表，应该为空
		request = MockMvcRequestBuilders.get("/users");
		mvc.perform(request)
			.andExpect(status().isOk())
			.andExpect(content().string(equalTo("[]")));
	}

}
